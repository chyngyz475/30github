import logging
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from database import init_db, get_db
from dotenv import load_dotenv
import os

load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

logging.basicConfig(level=logging.INFO)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
main_kb = ReplyKeyboardMarkup(resize_keyboard=True)
main_kb.add(KeyboardButton("–î–æ–±–∞–≤–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω"), KeyboardButton("–ú–æ–∏ —Ç–µ–ª–µ—Ñ–æ–Ω—ã"))

@dp.message(commands=["start"])
async def start_command(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –ø—Ä–æ–¥–∞—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω üì±", reply_markup=main_kb)

@dp.message(lambda message: message.text == "–î–æ–±–∞–≤–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω")
async def add_phone(message: types.Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –±—Ä–µ–Ω–¥ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, Samsung, iPhone):")
    dp.register_message_handler(get_brand, state="brand")

async def get_brand(message: types.Message, state):
    brand = message.text
    await state.update_data(brand=brand)
    await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –º–æ–¥–µ–ª—å:")
    dp.register_message_handler(get_model, state="model")

async def get_model(message: types.Message, state):
    model = message.text
    user_data = await state.get_data()
    brand = user_data["brand"]
    
    async with await get_db() as db:
        await db.execute("INSERT INTO phones (user_id, brand, model) VALUES ($1, $2, $3)", message.from_user.id, brand, model)
    
    await message.answer(f"–¢–µ–ª–µ—Ñ–æ–Ω {brand} {model} –¥–æ–±–∞–≤–ª–µ–Ω!", reply_markup=main_kb)

async def main():
    await init_db()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
