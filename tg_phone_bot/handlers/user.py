from aiogram import Router, types, Bot
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from sqlalchemy.orm import Session
from database import get_db
from models import Phone, Request, User
from keyboards import get_main_menu

router = Router()

@router.message(Command("start"))
async def cmd_start(message: types.Message):
    with next(get_db()) as session:
        user = session.query(User).filter_by(id=message.from_user.id).first()
        if not user:
            user = User(
                id=message.from_user.id,
                first_name=message.from_user.first_name,
                username=message.from_user.username,
                role="user"
            )
            session.add(user)
            session.commit()
    await message.answer("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_main_menu())

@router.message(lambda message: message.text == "üì± –°–ø–∏—Å–æ–∫ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤")
async def list_phones_handler(message: types.Message):
    await list_phones(message)
    with next(get_db()) as session:
        phones = session.query(Phone).filter(Phone.status == "active").all()
        if not phones:
            await message.answer("üì≠ –û–±—ä—è–≤–ª–µ–Ω–∏–π –ø–æ–∫–∞ –Ω–µ—Ç!")
            return
        for phone in phones:
            caption = (
                f"<b>üì± {phone.brand} {phone.model}</b>\n"
                f"üí∞ –¶–µ–Ω–∞: {phone.price} —Ä—É–±.\n"
                f"üîã –ë–∞—Ç–∞—Ä–µ—è: {phone.battery or 'N/A'}%\n"
                f"üõ† –°–æ—Å—Ç–æ—è–Ω–∏–µ: {phone.condition}\n"
                f"üìå –û–ø–∏—Å–∞–Ω–∏–µ: {phone.description or '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'}"
            )
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚úÖ –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"reserve_{phone.id}")],
                [InlineKeyboardButton(text="üì© –ù–∞–ø–∏—Å–∞—Ç—å –ø—Ä–æ–¥–∞–≤—Ü—É", callback_data=f"chat_{phone.admin_id}")]
            ])
            if phone.photos:
                await message.answer_photo(phone.photos[0], caption=caption, reply_markup=keyboard)
            else:
                await message.answer(caption, reply_markup=keyboard)


async def list_phones(message: types.Message, page: int = 0):
    ITEMS_PER_PAGE = 5
    with next(get_db()) as session:
        phones = session.query(Phone).filter(Phone.status == "active").offset(page * ITEMS_PER_PAGE).limit(ITEMS_PER_PAGE).all()
        total = session.query(Phone).filter(Phone.status == "active").count()
        if not phones:
            await message.answer("üì≠ –û–±—ä—è–≤–ª–µ–Ω–∏–π –ø–æ–∫–∞ –Ω–µ—Ç!")
            return
        for phone in phones:
            caption = f"<b>üì± {phone.brand} {phone.model}</b>\n..."
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚úÖ –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"reserve_{phone.id}")],
                [InlineKeyboardButton(text="üì© –ù–∞–ø–∏—Å–∞—Ç—å –ø—Ä–æ–¥–∞–≤—Ü—É", callback_data=f"chat_{phone.admin_id}")]
            ])
            if total > ITEMS_PER_PAGE:
                nav_buttons = []
                if page > 0:
                    nav_buttons.append(InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data=f"page_{page-1}"))
                if (page + 1) * ITEMS_PER_PAGE < total:
                    nav_buttons.append(InlineKeyboardButton(text="–î–∞–ª–µ–µ ‚û°", callback_data=f"page_{page+1}"))
                keyboard.inline_keyboard.append(nav_buttons)
            await message.answer_photo(phone.photos[0], caption=caption, reply_markup=keyboard) if phone.photos else await message.answer(caption, reply_markup=keyboard)

@router.callback_query(lambda c: c.data.startswith("page_"))
async def paginate(callback: CallbackQuery):
    page = int(callback.data.split("_")[1])
    await list_phones(callback.message, page)
    await callback.answer()

@router.callback_query(lambda c: c.data.startswith("reserve_"))
async def reserve_phone(callback: CallbackQuery):
    phone_id = int(callback.data.split("_")[1])
    with next(get_db()) as session:
        phone = session.query(Phone).filter_by(id=phone_id, status="active").first()
        if phone:
            phone.status = "reserved"
            request = Request(phone_id=phone_id, user_id=callback.from_user.id)
            session.add(request)
            session.commit()
            await callback.message.answer("‚úÖ –ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞! –ñ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞.")
            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞
            await callback.bot.send_message(
                phone.admin_id,
                f"üì© –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω: {phone.brand} {phone.model} (ID: {phone_id})"
            )
        else:
            await callback.answer("‚ùå –¢–µ–ª–µ—Ñ–æ–Ω —É–∂–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω –∏–ª–∏ –ø—Ä–æ–¥–∞–Ω.", show_alert=True)
    await callback.answer()

@router.message(lambda message: message.text == "‚Ñπ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
async def show_info(message: types.Message):
    info_text = (
        "üì¨ **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ—Å—Ç–∞–≤–∫–µ –∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã**\n"
        "–î–æ—Å—Ç–∞–≤–∫–∞: –ø–æ –≤—Å–µ–π –†–æ—Å—Å–∏–∏ —á–µ—Ä–µ–∑ –°–î–≠–ö –∏–ª–∏ –ü–æ—á—Ç—É –†–æ—Å—Å–∏–∏.\n"
        "–°—Ä–æ–∫: 3-7 –¥–Ω–µ–π.\n"
        "–ö–æ–Ω—Ç–∞–∫—Ç—ã: @PhoneBotSupport\n"
        "–û–ø–ª–∞—Ç–∞: –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∫–∞—Ä—Ç—É –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞."
    )
    await message.answer(info_text)



# –î–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞
chat_sessions = {}  # –•—Ä–∞–Ω–∏–ª–∏—â–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤: {user_id: admin_id}

@router.callback_query(lambda c: c.data.startswith("chat_"))
async def start_chat(callback: CallbackQuery, bot: Bot):
    admin_id = int(callback.data.split("_")[1])
    user_id = callback.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–Ω—è—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥—Ä—É–≥–∏–º —á–∞—Ç–æ–º
    if user_id in chat_sessions:
        await callback.answer("‚ùå –í—ã —É–∂–µ –≤ —á–∞—Ç–µ!", show_alert=True)
        return

    chat_sessions[user_id] = admin_id
    chat_sessions[admin_id] = user_id  # –î–≤—É—Å—Ç–æ—Ä–æ–Ω–Ω—è—è —Å–≤—è–∑—å

    await callback.message.answer("‚úÖ –í—ã –Ω–∞—á–∞–ª–∏ —á–∞—Ç —Å –ø—Ä–æ–¥–∞–≤—Ü–æ–º. –ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:")
    await bot.send_message(admin_id, f"üì© –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{callback.from_user.username or user_id} —Ö–æ—á–µ—Ç —Å–≤—è–∑–∞—Ç—å—Å—è —Å –≤–∞–º–∏!")
    await callback.answer()

@router.message(lambda message: message.from_user.id in chat_sessions)
async def forward_message(message: types.Message, bot: Bot):
    user_id = message.from_user.id
    recipient_id = chat_sessions[user_id]
    await bot.send_message(recipient_id, f"üí¨ @{message.from_user.username or user_id}: {message.text}")

@router.message(Command("end_chat"))
async def end_chat(message: types.Message):
    user_id = message.from_user.id
    if user_id in chat_sessions:
        recipient_id = chat_sessions.pop(user_id)
        chat_sessions.pop(recipient_id, None)
        await message.answer("‚úÖ –ß–∞—Ç –∑–∞–≤–µ—Ä—à–µ–Ω.")
        await message.bot.send_message(recipient_id, "‚ùå –ß–∞—Ç –∑–∞–≤–µ—Ä—à–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
    else:
        await message.answer("üö´ –í—ã –Ω–µ –≤ —á–∞—Ç–µ.")