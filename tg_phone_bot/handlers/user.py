from aiogram import Router, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message
from sqlalchemy.orm import Session
from database import get_db
from models import Phone
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery

router = Router()

# –ö–æ–º–∞–Ω–¥–∞ /list –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π
@router.message(Command("list"))
async def list_phones(message: types.Message, session: Session = get_db()):
    phones = session.query(Phone).filter(Phone.status == "–ê–∫—Ç–∏–≤–Ω–æ").all()

    if not phones:
        await message.answer("üì≠ –û–±—ä—è–≤–ª–µ–Ω–∏–π –ø–æ–∫–∞ –Ω–µ—Ç!")
        return

    for phone in phones:
        caption = (
            f"<b>üì± {phone.brand} {phone.model}</b>\n"
            f"üí∞ –¶–µ–Ω–∞: {phone.price} —Ä—É–±.\n"
            f"üîã –ë–∞—Ç–∞—Ä–µ—è: {phone.battery}%\n"
            f"üõ† –°–æ—Å—Ç–æ—è–Ω–∏–µ: {phone.condition}\n"
            f"üìå –û–ø–∏—Å–∞–Ω–∏–µ: {phone.description}"
        )
        
        photos = phone.photos
        media = [types.InputMediaPhoto(photo, caption=caption if i == 0 else "") for i, photo in enumerate(photos)]
        
        if media:
            await message.answer_media_group(media)
        else:
            await message.answer(caption)

    await message.answer("üì≠ –û–±—ä—è–≤–ª–µ–Ω–∏–π –ø–æ–∫–∞ –Ω–µ—Ç!")
    


class SearchState(StatesGroup):
    query = State()

# –ö–æ–º–∞–Ω–¥–∞ /search
@router.message(Command("search"))
async def start_search(message: Message, state: FSMContext):
    await message.answer("üîé –í–≤–µ–¥–∏—Ç–µ –º–∞—Ä–∫—É, –º–æ–¥–µ–ª—å –∏–ª–∏ —Ü–µ–Ω–æ–≤–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'iPhone', 'Samsung' –∏–ª–∏ '–¥–æ 40000'):")
    await state.set_state(SearchState.query)

# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@router.message(SearchState.query)
async def process_search(message: Message, state: FSMContext, session: Session = get_db()):
    query = message.text.lower().strip()

    # –ü–æ–∏—Å–∫ –ø–æ –º–∞—Ä–∫–µ –∏ –º–æ–¥–µ–ª–∏
    phones = session.query(Phone).filter(
        (Phone.brand.ilike(f"%{query}%")) |
        (Phone.model.ilike(f"%{query}%")) |
        (Phone.price <= int(query.replace("–¥–æ ", ""))) if "–¥–æ" in query else False
    ).all()

    await state.clear()

    if not phones:
        await message.answer("‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å.")
        return

    for phone in phones:
        caption = (
            f"<b>üì± {phone.brand} {phone.model}</b>\n"
            f"üí∞ –¶–µ–Ω–∞: {phone.price} —Ä—É–±.\n"
            f"üîã –ë–∞—Ç–∞—Ä–µ—è: {phone.battery}%\n"
            f"üõ† –°–æ—Å—Ç–æ—è–Ω–∏–µ: {phone.condition}\n"
            f"üìå –û–ø–∏—Å–∞–Ω–∏–µ: {phone.description}"
        )

        photos = phone.photos
        media = [types.InputMediaPhoto(photo, caption=caption if i == 0 else "") for i, photo in enumerate(photos)]

        if media:
            await message.answer_media_group(media)
        else:
            await message.answer(caption)


# 1. –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–≤–æ–∏—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π
@router.message(Command("my_ads"))
async def my_ads(message: types.Message, session: Session = get_db()):
    user_id = message.from_user.id
    phones = session.query(Phone).filter(Phone.user_id == user_id).all()

    if not phones:
        await message.answer("üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π.")
        return

    for phone in phones:
        caption = (
            f"<b>üì± {phone.brand} {phone.model}</b>\n"
            f"üí∞ –¶–µ–Ω–∞: {phone.price} —Ä—É–±.\n"
            f"üîã –ë–∞—Ç–∞—Ä–µ—è: {phone.battery}%\n"
            f"üõ† –°–æ—Å—Ç–æ—è–Ω–∏–µ: {phone.condition}\n"
            f"üìå –û–ø–∏—Å–∞–Ω–∏–µ: {phone.description}"
        )

        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_{phone.id}")],
                [InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_{phone.id}")]
            ]
        )

        await message.answer(caption, reply_markup=keyboard)

# 2. –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è
@router.callback_query(lambda c: c.data.startswith("delete_"))
async def delete_ad(callback: CallbackQuery, session: Session = get_db()):
    ad_id = int(callback.data.split("_")[1])
    phone = session.query(Phone).filter(Phone.id == ad_id, Phone.user_id == callback.from_user.id).first()

    if phone:
        session.delete(phone)
        session.commit()
        await callback.message.answer("‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ!")
        await callback.message.delete()
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞: –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞–º.", show_alert=True)

# 3. FSM –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è
class EditState(StatesGroup):
    waiting_for_field = State()
    waiting_for_value = State()

@router.callback_query(lambda c: c.data.startswith("edit_"))
async def edit_ad(callback: CallbackQuery, state: FSMContext):
    ad_id = int(callback.data.split("_")[1])
    await state.update_data(ad_id=ad_id)

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üí∞ –¶–µ–Ω–∞", callback_data="edit_price")],
            [InlineKeyboardButton(text="üìå –û–ø–∏—Å–∞–Ω–∏–µ", callback_data="edit_description")]
        ]
    )

    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å:", reply_markup=keyboard)
    await state.set_state(EditState.waiting_for_field)

@router.callback_query(EditState.waiting_for_field)
async def edit_field(callback: CallbackQuery, state: FSMContext):
    field = callback.data.split("_")[1]
    await state.update_data(field=field)

    await callback.message.answer(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è {field}:")
    await state.set_state(EditState.waiting_for_value)

@router.message(EditState.waiting_for_value)
async def save_edit(message: types.Message, state: FSMContext, session: Session = get_db()):
    data = await state.get_data()
    ad_id, field, value = data["ad_id"], data["field"], message.text

    phone = session.query(Phone).filter(Phone.id == ad_id).first()
    if phone:
        setattr(phone, field, value)
        session.commit()
        await message.answer("‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

    await state.clear()
