import os
import io
from PIL import Image
from aiogram import Router, Bot, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from sqlalchemy.orm import Session
from database import get_db
from models import Phone
import config

router = Router()

class AddPhone(StatesGroup):
    brand = State()
    model = State()
    price = State()
    battery = State()
    condition = State()
    description = State()
    photos = State()

# –ö–æ–º–∞–Ω–¥–∞ /add
@router.message(Command("add"))
@router.message(lambda message: message.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω")
async def cmd_add(message: types.Message, state: FSMContext):
    if message.from_user.id != config.ADMIN_ID:
        return await message.answer("üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π!")
    
    await state.set_state(AddPhone.brand)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –±—Ä–µ–Ω–¥ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, Apple, Samsung):")

@router.message(AddPhone.brand)
async def add_brand(message: types.Message, state: FSMContext):
    await state.update_data(brand=message.text)
    await state.set_state(AddPhone.model)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –º–æ–¥–µ–ª—å —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, iPhone 13):")

@router.message(AddPhone.model)
async def add_model(message: types.Message, state: FSMContext):
    await state.update_data(model=message.text)
    await state.set_state(AddPhone.price)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –≤ —Ä—É–±–ª—è—Ö:")

@router.message(AddPhone.price)
async def add_price(message: types.Message, state: FSMContext):
    try:
        price = int(message.text)
        await state.update_data(price=price)
        await state.set_state(AddPhone.battery)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ—Å—Ç–∞—Ç–æ–∫ –±–∞—Ç–∞—Ä–µ–∏ (–≤ %):")
    except ValueError:
        await message.answer("–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")

@router.message(AddPhone.battery)
async def add_battery(message: types.Message, state: FSMContext):
    try:
        battery = int(message.text)
        await state.update_data(battery=battery)
        await state.set_state(AddPhone.condition)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ (–Ω–æ–≤—ã–π / –±/—É):")
    except ValueError:
        await message.answer("–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")

@router.message(AddPhone.condition)
async def add_condition(message: types.Message, state: FSMContext):
    await state.update_data(condition=message.text)
    await state.set_state(AddPhone.description)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")

@router.message(AddPhone.description)
async def add_description(message: types.Message, state: FSMContext):
    await state.update_data(description=message.text)
    await state.set_state(AddPhone.photos)
    await message.answer("–ó–∞–≥—Ä—É–∑–∏—Ç–µ 1-3 —Ñ–æ—Ç–æ —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")

# –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ
async def save_photo(bot: Bot, file_id: str) -> str:
    """–°–∫–∞—á–∏–≤–∞–µ—Ç, –∏–∑–º–µ–Ω—è–µ—Ç —Ä–∞–∑–º–µ—Ä –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ñ–æ—Ç–æ –≤ –ø–∞–ø–∫—É media"""
    file = await bot.download(file_id)
    image = Image.open(file)
    image = image.resize((800, 800), Image.ANTIALIAS)

    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É media, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    os.makedirs("media", exist_ok=True)

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
    photo_path = f"media/{file_id}.jpg"
    with open(photo_path, "wb") as img_file:
        image.save(img_file, format="JPEG")

    return photo_path

@router.message(AddPhone.photos, lambda message: message.photo)
async def add_photos(message: types.Message, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É —Ñ–æ—Ç–æ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ –ë–î"""
    data = await state.get_data()
    user_photos = data.get("photos", [])

    # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ñ–æ—Ç–æ (–Ω–µ –±–æ–ª—å—à–µ 3)
    if len(user_photos) >= 3:
        return await message.answer("‚ùå –ú–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–µ –±–æ–ª–µ–µ 3-—Ö —Ñ–æ—Ç–æ!")

    file_id = message.photo[-1].file_id  # –ë–µ—Ä–µ–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ —Ñ–æ—Ç–æ
    photo_path = await save_photo(bot, file_id)

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–æ—Ç–æ
    user_photos.append(photo_path)
    await state.update_data(photos=user_photos)

    # –ï—Å–ª–∏ —É–∂–µ 3 —Ñ–æ—Ç–æ, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
    if len(user_photos) == 3:
        await save_phone_data(message, state)
    else:
        await message.answer(f"‚úÖ –§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ ({len(user_photos)}/3). –ó–∞–≥—Ä—É–∑–∏—Ç–µ –µ—â–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /done –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.")

@router.message(Command("done"))
async def finish_adding_photos(message: types.Message, state: FSMContext):
    """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ"""
    data = await state.get_data()
    user_photos = data.get("photos", [])

    if not user_photos:
        return await message.answer("‚ùå –í—ã –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ñ–æ—Ç–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ!")

    await save_phone_data(message, state)

async def save_phone_data(message: types.Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    data = await state.get_data()

    session = get_db()  # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é
    try:
        new_phone = Phone(
            admin_id=message.from_user.id,
            brand=data["brand"],
            model=data["model"],
            price=data["price"],
            battery=data["battery"],
            condition=data["condition"],
            description=data["description"],
            photos=data["photos"],
        )

        session.add(new_phone)
        session.commit()
        await state.clear()
        await message.answer("‚úÖ –¢–µ–ª–µ—Ñ–æ–Ω —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
    finally:
        session.close()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é

