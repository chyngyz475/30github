from aiogram import Router, types, Bot
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from sqlalchemy.orm import Session
from database import get_db
from models import Phone, Request, User
from config import ADMIN_PASSWORD
from keyboards import get_admin_menu  # –ë—É–¥–µ–º —Ä–µ–∞–ª–∏–∑–æ–≤—ã–≤–∞—Ç—å –ø–æ–∑–∂–µ
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from config import GROUP_CHAT_ID

class AddPhone(StatesGroup):
    brand = State()
    model = State()
    price = State()
    condition = State()
    battery = State()
    description = State()
    photos = State()


class EditPhone(StatesGroup):
    waiting_for_field = State()
    waiting_for_value = State()

router = Router()

class AdminAuth(StatesGroup):
    password = State()

@router.message(Command("admin"))
async def cmd_admin(message: types.Message, state: FSMContext):
    await state.set_state(AdminAuth.password)
    await message.answer("üîë –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:")

@router.message(AdminAuth.password)
async def check_admin_password(message: types.Message, state: FSMContext):
    if message.text == ADMIN_PASSWORD:
        with next(get_db()) as session:
            user = session.query(User).filter_by(id=message.from_user.id).first()
            if not user:
                user = User(
                    id=message.from_user.id,
                    first_name=message.from_user.first_name,
                    username=message.from_user.username,
                    role="admin"
                )
                session.add(user)
            else:
                user.role = "admin"
            session.commit()
        await state.clear()
        await message.answer("‚úÖ –í—ã –≤–æ—à–ª–∏ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!", reply_markup=get_admin_menu())
    else:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å!")
        await state.clear()




@router.message(lambda message: message.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω")
async def cmd_add_phone(message: types.Message, state: FSMContext):
    with next(get_db()) as session:
        user = session.query(User).filter_by(id=message.from_user.id).first()
        if user.role != "admin":
            return await message.answer("üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤!")
    await state.set_state(AddPhone.brand)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –±—Ä–µ–Ω–¥ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, Apple):")

@router.message(AddPhone.brand)
async def add_brand(message: types.Message, state: FSMContext):
    await state.update_data(brand=message.text)
    await state.set_state(AddPhone.model)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –º–æ–¥–µ–ª—å —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, iPhone 13):")

@router.message(AddPhone.model)
async def add_model(message: types.Message, state: FSMContext):
    await state.update_data(model=message.text)
    await state.set_state(AddPhone.price)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –≤ —Ä—É–±–ª—è—Ö:")

@router.message(AddPhone.price)
async def add_price(message: types.Message, state: FSMContext):
    try:
        price = int(message.text)
        await state.update_data(price=price)
        await state.set_state(AddPhone.condition)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ (–Ω–æ–≤—ã–π/–±/—É):")
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")

@router.message(AddPhone.condition)
async def add_condition(message: types.Message, state: FSMContext):
    await state.update_data(condition=message.text)
    await state.set_state(AddPhone.battery)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ—Å—Ç–∞—Ç–æ–∫ –±–∞—Ç–∞—Ä–µ–∏ –≤ % (–∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ —á–µ—Ä–µ–∑ /skip):")

@router.message(AddPhone.battery)
async def add_battery(message: types.Message, state: FSMContext):
    if message.text == "/skip":
        await state.update_data(battery=None)
    else:
        try:
            battery = int(message.text)
            await state.update_data(battery=battery)
        except ValueError:
            return await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –∏–ª–∏ /skip!")
    await state.set_state(AddPhone.description)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ —á–µ—Ä–µ–∑ /skip):")

@router.message(AddPhone.description)
async def add_description(message: types.Message, state: FSMContext):
    if message.text == "/skip":
        await state.update_data(description=None)
    else:
        await state.update_data(description=message.text)
    await state.set_state(AddPhone.photos)
    await message.answer("–ó–∞–≥—Ä—É–∑–∏—Ç–µ 1-3 —Ñ–æ—Ç–æ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç–µ —á–µ—Ä–µ–∑ /done):")

@router.message(AddPhone.photos, lambda message: message.photo)
async def add_photos(message: types.Message, state: FSMContext, bot: Bot):
    data = await state.get_data()
    photos = data.get("photos", [])
    if len(photos) >= 3:
        return await message.answer("‚ùå –õ–∏–º–∏—Ç: 3 —Ñ–æ—Ç–æ!")
    photos.append(message.photo[-1].file_id)
    await state.update_data(photos=photos)
    await message.answer(f"–§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ ({len(photos)}/3). –ó–∞–≥—Ä—É–∑–∏—Ç–µ –µ—â–µ –∏–ª–∏ /done.")

@router.message(AddPhone.photos, Command("done"))
async def finish_adding(message: types.Message, state: FSMContext, bot: Bot):
    data = await state.get_data()
    if not data.get("photos"):
        return await message.answer("‚ùå –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —Ñ–æ—Ç–æ!")
    with next(get_db()) as session:
        phone = Phone(
            admin_id=message.from_user.id,
            brand=data["brand"],
            model=data["model"],
            price=data["price"],
            condition=data["condition"],
            battery=data["battery"],
            description=data["description"],
            photos=data["photos"]
        )
        session.add(phone)
        session.commit()
        caption = f"üì± {phone.brand} {phone.model}\nüí∞ {phone.price} —Ä—É–±."
        await bot.send_photo(GROUP_CHAT_ID, phone.photos[0], caption=caption)
    await state.clear()
    await message.answer("‚úÖ –¢–µ–ª–µ—Ñ–æ–Ω –¥–æ–±–∞–≤–ª–µ–Ω!")

@router.message(lambda message: message.text == "üìã –ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è")
async def my_ads(message: types.Message):
    with next(get_db()) as session:
        user = session.query(User).filter_by(id=message.from_user.id).first()
        if user.role != "admin":
            return await message.answer("üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤!")
        phones = session.query(Phone).filter_by(admin_id=message.from_user.id).all()
        if not phones:
            return await message.answer("üì≠ –£ –≤–∞—Å –Ω–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π.")
        for phone in phones:
            caption = (
                f"<b>üì± {phone.brand} {phone.model}</b>\n"
                f"üí∞ –¶–µ–Ω–∞: {phone.price} —Ä—É–±.\n"
                f"–°—Ç–∞—Ç—É—Å: {phone.status}"
            )
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_{phone.id}")],
                [InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_{phone.id}")]
            ])
            await message.answer(caption, reply_markup=keyboard)

@router.callback_query(lambda c: c.data.startswith("delete_"))
async def delete_phone(callback: CallbackQuery):
    phone_id = int(callback.data.split("_")[1])
    with next(get_db()) as session:
        phone = session.query(Phone).filter_by(id=phone_id, admin_id=callback.from_user.id).first()
        if phone:
            session.delete(phone)
            session.commit()
            await callback.message.answer("‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ!")
            await callback.message.delete()
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ—Ç –ø—Ä–∞–≤ –∏–ª–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)

@router.callback_query(lambda c: c.data.startswith("edit_"))
async def edit_phone(callback: CallbackQuery, state: FSMContext):
    phone_id = int(callback.data.split("_")[1])
    await state.update_data(phone_id=phone_id)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —Ü–µ–Ω—ã:")
    await state.set_state("edit_price")  # –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –ø—Ä–∏–º–µ—Ä, –º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å



@router.callback_query(lambda c: c.data.startswith("edit_"))
async def start_edit_phone(callback: CallbackQuery, state: FSMContext):
    phone_id = int(callback.data.split("_")[1])
    with next(get_db()) as session:
        phone = session.query(Phone).filter_by(id=phone_id, admin_id=callback.from_user.id).first()
        if not phone:
            await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –∏–ª–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
            return
    await state.update_data(phone_id=phone_id)
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí∞ –¶–µ–Ω–∞", callback_data="field_price")],
        [InlineKeyboardButton(text="üõ† –°–æ—Å—Ç–æ—è–Ω–∏–µ", callback_data="field_condition")],
        [InlineKeyboardButton(text="üîã –ë–∞—Ç–∞—Ä–µ—è", callback_data="field_battery")],
        [InlineKeyboardButton(text="üìå –û–ø–∏—Å–∞–Ω–∏–µ", callback_data="field_description")],
        [InlineKeyboardButton(text="üì∏ –§–æ—Ç–æ", callback_data="field_photos")]
    ])
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å:", reply_markup=keyboard)
    await state.set_state(EditPhone.waiting_for_field)
    await callback.answer()

@router.callback_query(EditPhone.waiting_for_field)
async def select_field(callback: CallbackQuery, state: FSMContext):
    field = callback.data.split("_")[1]
    await state.update_data(field=field)
    if field == "photos":
        await callback.message.answer("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –Ω–æ–≤—ã–µ —Ñ–æ—Ç–æ (–¥–æ 3-—Ö):")
    else:
        await callback.message.answer(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è {field}:")
    await state.set_state(EditPhone.waiting_for_value)
    await callback.answer()

@router.message(EditPhone.waiting_for_value, lambda message: not message.photo)
async def save_value(message: types.Message, state: FSMContext):
    data = await state.get_data()
    phone_id, field = data["phone_id"], data["field"]

    with next(get_db()) as session:
        phone = session.query(Phone).filter_by(id=phone_id).first()
        if field in ["price", "battery"]:
            try:
                value = int(message.text) if message.text != "/skip" else None
            except ValueError:
                return await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –∏–ª–∏ /skip!")
        else:
            value = message.text if message.text != "/skip" else None
        setattr(phone, field, value)
        session.commit()
    await message.answer(f"‚úÖ –ü–æ–ª–µ {field} –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
    await state.clear()

@router.message(EditPhone.waiting_for_value, lambda message: message.photo)
async def save_photos(message: types.Message, state: FSMContext):
    data = await state.get_data()
    phone_id = data["phone_id"]
    photos = data.get("photos", [])

    if len(photos) >= 3:
        return await message.answer("‚ùå –õ–∏–º–∏—Ç: 3 —Ñ–æ—Ç–æ!")
    photos.append(message.photo[-1].file_id)

    await state.update_data(photos=photos)
    if len(photos) < 3:
        await message.answer(f"–§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ ({len(photos)}/3). –ó–∞–≥—Ä—É–∑–∏—Ç–µ –µ—â–µ –∏–ª–∏ /done.")
    else:
        with next(get_db()) as session:
            phone = session.query(Phone).filter_by(id=phone_id).first()
            phone.photos = photos
            session.commit()
        await message.answer("‚úÖ –§–æ—Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")
        await state.clear()

@router.message(EditPhone.waiting_for_value, Command("done"))
async def finish_edit_photos(message: types.Message, state: FSMContext):
    data = await state.get_data()
    phone_id, photos = data["phone_id"], data.get("photos", [])
    if not photos:
        return await message.answer("‚ùå –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —Ñ–æ—Ç–æ!")
    with next(get_db()) as session:
        phone = session.query(Phone).filter_by(id=phone_id).first()
        phone.photos = photos
        session.commit()
    await message.answer("‚úÖ –§–æ—Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")
    await state.clear()


@router.message(lambda message: message.text == "üì© –ó–∞—è–≤–∫–∏")
async def list_requests(message: types.Message):
    with next(get_db()) as session:
        user = session.query(User).filter_by(id=message.from_user.id).first()
        if user.role != "admin":
            return await message.answer("üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤!")
        requests = session.query(Request).join(Phone).filter(Phone.admin_id == message.from_user.id).all()
        if not requests:
            return await message.answer("üì≠ –ó–∞—è–≤–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç.")
        for req in requests:
            phone = session.query(Phone).filter_by(id=req.phone_id).first()
            caption = (
                f"üì© –ó–∞—è–≤–∫–∞ ID: {req.id}\n"
                f"–¢–µ–ª–µ—Ñ–æ–Ω: {phone.brand} {phone.model}\n"
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{req.user_id}\n"
                f"–°—Ç–∞—Ç—É—Å: {req.status}"
            )
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚è≥ –í –æ–±—Ä–∞–±–æ—Ç–∫–µ", callback_data=f"req_process_{req.id}")],
                [InlineKeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∞", callback_data=f"req_complete_{req.id}")]
            ])
            await message.answer(caption, reply_markup=keyboard)

@router.callback_query(lambda c: c.data.startswith("req_"))
async def update_request_status(callback: CallbackQuery):
    action, req_id = callback.data.split("_")[1], int(callback.data.split("_")[2])
    with next(get_db()) as session:
        request = session.query(Request).filter_by(id=req_id).first()
        if action == "process":
            request.status = "processing"
            await callback.message.answer("‚úÖ –ó–∞—è–≤–∫–∞ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É.")
        elif action == "complete":
            request.status = "completed"
            phone = session.query(Phone).filter_by(id=request.phone_id).first()
            phone.status = "sold"
            await callback.message.answer("‚úÖ –ó–∞—è–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, —Ç–µ–ª–µ—Ñ–æ–Ω –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –ø—Ä–æ–¥–∞–Ω–Ω—ã–π.")
        session.commit()
    await callback.message.edit_reply_markup(None)  # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏
    await callback.answer()