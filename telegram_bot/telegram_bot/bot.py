import logging
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message
from aiogram.filters import Command
from config import TOKEN
from auth.register import register_new_account
from auth.account_manager import get_account

logging.basicConfig(level=logging.INFO)
bot = Bot(token=TOKEN)
dp = Dispatcher()

@dp.message(Command("start"))
async def start(message: Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ —Å–∞–π—Ç, –∏ —è –ø–æ–ø—Ä–æ–±—É—é —Å–ø–∞—Ä—Å–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –¢–∞–∫–∂–µ —Ç—ã –º–æ–∂–µ—à—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç –∫–æ–º–∞–Ω–¥–æ–π /register.")

@dp.message(Command("register"))
async def register(message: Message):
    result = await register_new_account()
    if "error" in result:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {result['error']}")
    else:
        await message.answer(f"‚úÖ –ù–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç —Å–æ–∑–¥–∞–Ω:\nEmail: {result['email']}\n–ü–∞—Ä–æ–ª—å: {result['password']}")

@dp.message(Command("account"))
async def get_account_info(message: Message):
    account = get_account()
    if account:
        await message.answer(f"üîê –¢–µ–∫—É—â–∏–π –∞–∫–∫–∞—É–Ω—Ç:\nEmail: {account['email']}\n–ü–∞—Ä–æ–ª—å: {account['password']}")
    else:
        await message.answer("‚ùå –í –±–∞–∑–µ –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤.")
        


async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
